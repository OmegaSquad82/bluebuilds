name: build-image
on:
  workflow_dispatch: # allow manually triggering builds
  push:
    paths-ignore:
      - "**/release-please.yml"
      - "**/vulnerability-scan.yml"
      - "**/composition-analysis.yml"
      - "**.md"
      - "**/.gitkeep"
      - "build-isos"
      - "renovate.json"
  schedule:
    - cron:
        "25 06 * * 1,3,5" # build at 06:10 UTC on Mon, Wed, Fr
        # (45 minutes after last ublue images start building)

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

env:
  HOMESPACE_OWNER:
  IS_DEFAULT: false
  IS_RECHUNK: false
  DO_RECHUNK: false
  REGISTRY_USERNAME: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ github.token }}
  REGISTRY_IMG_PATH: ghcr.io/${{ github.repository_owner }}
  IMGREP:
  IMGDIG:
  IMG_ID:

jobs:
  imagebuild:
    name: Build Custom Image
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: true
      matrix:
        package:
          - aubertit
          - buttgenbachit
          - carbonatcyanotrichit
          - flaviramea
    steps:
      - run: id
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          overprovision-lvm: true

      - name: Compress critical paths
        shell: bash
        run: |
          set -euo pipefail

          # https://github.com/easimon/maximize-build-space/issues/23
          # https://github.com/easimon/maximize-build-space/pull/37
          WORKSPACE_OWNER="$(stat -c '%U:%G' "${GITHUB_WORKSPACE}")"
          HOMESPACE_OWNER="$(stat -c '%U:%G' "${HOME}")"

          VG_NAME=buildvg
          LV_NAME=buildlv
          LV_PATH="/dev/mapper/${VG_NAME}-${LV_NAME}"

          cd ~
          sudo umount "${LV_PATH}"
          sudo mkdir -p /btrfsrootvol "${HOME}"/.local/share/containers /var/lib/containers /sysroot

          # https://github.com/radxa/armbian-compile-action/commit/82fe40188f2f3b4dbd4ae8fb9c64f49f117085c7
          sudo mkfs.btrfs -L "${LV_NAME}" -M -m single --force "${LV_PATH}"
          sudo mount -o defaults,noatime,compress=zstd:1,discard=async "${LV_PATH}" /btrfsrootvol

          cd /btrfsrootvol
          for subvolume in containers homstorage ostreeroot mywrkspace; do
            sudo btrfs subvolume create "$subvolume"
          done

          # https://github.com/containers/podman/blob/main/troubleshooting.md#11-changing-the-location-of-the-graphroot-leads-to-permission-denied
          sudo mount -o subvol=containers,noatime,compress=zstd:1,discard=async "${LV_PATH}" /var/lib/containers
          sudo mount -o subvol=homstorage,noatime,compress=zstd:1,discard=async "${LV_PATH}" "${HOME}"/.local/share/containers

          sudo mount -o subvol=ostreeroot,noatime,compress=zstd:1,discard=async "${LV_PATH}" /sysroot
          sudo mount -o subvol=mywrkspace,noatime,compress=zstd:1,discard=async "${LV_PATH}" "${GITHUB_WORKSPACE}"

          sudo chown -R "$WORKSPACE_OWNER" "${GITHUB_WORKSPACE}"

          # https://github.com/containers/podman/issues/5049#issuecomment-1348628646
          sudo chown -R "$HOMESPACE_OWNER" "${HOME}"/.local/share/containers /run/user/"$UID"

          sudo mount | grep btrfs
          lsblk

      - run: df -h

      - name: On default (main) branch?
        if: github.ref_name == github.event.repository.default_branch
        run: echo 'IS_DEFAULT=true' >"$GITHUB_ENV"

      - name: On test (rechunk) branch?
        if: github.ref_name == 'rechunk'
        run: echo 'IS_RECHUNK=true' >"$GITHUB_ENV"

      - name: Run hhd-dev/rechunk after build?
        if: env.IS_DEFAULT || env.IS_RECHUNK
        run: echo 'DO_RECHUNK=true' >"$GITHUB_ENV"

      - run: podman info
      - name: Build Custom Image
        uses: blue-build/github-action@v1.9.0
        with:
          # it does not do with :chunked, yet!
          build_opts: --compression-format zstd
          cosign_private_key: ${{ secrets.SIGNING_SECRET }}
          maximize_build_space: false
          pr_event_number: ${{ github.event.number }}
          rechunk: ${{ env.DO_RECHUNK }}
          recipe: recipe-${{ matrix.package }}.yml
          registry_token: ${{ github.token }}
          squash: true
      # - run: podman images

      # https://github.com/orgs/community/discussions/10553#discussioncomment-11066950
      # - run: echo "IMGREP=${REGISTRY_IMG_PATH@L}/${{ matrix.package }}" >"$GITHUB_ENV"
      # - name: Construct references to built image
      #   run: |
      #     set -euo pipefail

      #     podman image list --format json > images.json

      #     echo -n "Number of locally available images: "
      #     if jq -e 'if length == 0 then length else length|halt_error end' images.json; then
      #       sudo chown -R "$(stat -c '%U:%G' "${HOME}")" /run/user/"$UID"
      #       echo "WARNING: pulling ${IMGREP}"
      #       podman pull ${IMGREP}
      #       podman image list --format json | jq . | tee images.json
      #     elif jq -e 'if .[0].Names[0] | contains("${{ env.IMGREP }}") then halt else ""|halt_error end' images.json; then
      #       echo 'INFO: found in rootless podman repository'
      #     else
      #       echo "ERROR: $(jq -r '.[0].Names[0]' images.json)"
      #       exit 125
      #     fi

      #     echo "IMGDIG=$(jq -r '.[0].Digest' images.json)" >"$GITHUB_ENV"
      #     echo "IMG_ID=$(jq -r '.[0].Id' images.json)" >>"$GITHUB_ENV"

      # - run: podman history ${{ env.IMGREP }}@${{ env.IMGDIG }}

      # This is something the community worked on for quite some time
      #    but it likely will improve the efficiency of transfers;
      #      this was made to workaround the fact that bluebuild
      #        doesn't yet support zstd:chunked and it depends
      #          on bootc/rpm-ostree having implemented this
      #            which according to my tests is now good
      #
      # Changetracker
      #   https://fedoraproject.org/wiki/Changes/zstd:chunked
      #   https://github.com/containers/storage/pull/775
      # Documentation
      #   https://bootc-dev.github.io/bootc/filesystem-storage.html
      #   https://eu-os.eu/goals#goals # interesting new project
      # Projectstuffz
      #   https://github.com/blue-build/cli/issues/112
      #   https://github.com/containers/bootc/issues/20
      #   https://github.com/containers/bootc/issues/963
      # - name: Recompress it to zstd:chunked as ${{ env.IMGREP }}:${{ github.ref_name }}-zstchd
      #   run: |
      #     set -euo pipefail

      #     echo "${{ secrets.SIGNING_SECRET }}" >cosign.key

      #     # https://github.com/containers/image/issues/1613#issuecomment-1188923320
      #     # https://github.com/containers/image/blob/main/docs/containers-registries.d.5.md#individual-configuration-sections
      #     PODMAN_CONFDIR="$HOME/.config/containers/registries.d"
      #     PODMAN_CONFIG="${PODMAN_CONFDIR}/registries.yaml"

      #     mkdir -p "${PODMAN_CONFDIR}"
      #     echo "creating: ${PODMAN_CONFIG}"
      #     tee "${PODMAN_CONFIG}" <<EOF
      #     default-docker:
      #       use-sigstore-attachments: true
      #     EOF

      #     push_refs=('${{ github.ref_name }}')

      #     # FIXME
      #     # if [[ '${{ env.IS_DEFAULT }}' == 'true' ]]; then
      #     #  push_refs+=('latest')
      #     # fi

      #     for ref_name in "${push_refs[@]}" ; do
      #       podman push \
      #         --remove-signatures \
      #         --compression-format=zstd:chunked \
      #         --sign-by-sigstore-private-key=cosign.key \
      #         ${{ env.IMG_ID }} \
      #         ${{ env.IMGREP }}:"${ref_name}"-zstchd
      #     done

      # - run: df -h
