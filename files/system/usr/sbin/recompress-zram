#!/usr/bin/env bash
## devhints.io/bash
set -euo pipefail
IFS=$'\n\t'

# ensure sysfs knobs can be meddled with
if [[ $(/usr/bin/id -u) -ne 0 ]]; then
    echo "Not running as root"
    exit
fi

traperr() {
    echo "ERROR: ${BASH_SOURCE[1]} at about ${BASH_LINENO[0]}"
}

set -o errtrace
trap traperr ERR

# settings
TIMEFORMAT=$'real: %3lR\tuser: %3lU\tsys: %3lS'
TYPE="${TYPE:=type=huge}"

# comment out
DEBG=${DEBUG-:}
DENT=
NOOP=
while [[ $# -gt 0 ]]; do
    case "${1:-}" in
    --debug | --verbose | -d)
        DEBG=
        ;;
    --noop | --dry-run | -n)
        NOOP=:
        ;;
    esac
    shift
done

function print_states() {
    recomp_path="/sys/block/${1##*/}/recomp_algorithm"
    $ONCE echo -en "$recomp_path = "
    $ONCE echo "$(grep -Eo "(#.*:|\[.*\])" "$recomp_path" | xargs echo)"
    ONCE=:

    $DEBG echo
    $DEBG zramctl --output-all "${1:?Need a '/dev/zram<n>' device path.}"

    block_path="/sys/kernel/debug/zram/${1##*/}/block_state"
    if [[ -f "$block_path" ]]; then
        block_state="$(cat "$block_path")"
        function state() {
            echo "$block_state" | grep -cs "$1" || true
        }
        echo -e "$block_path = [huge: $(state 'h') idle: $(state 'i') rcmp: $(state 'r') none: $(state 'n') total: $(state '')]"
    else
        echo -e "$block_path not available!"
    fi

    mm_path="/sys/block/${1##*/}/mm_stat"
    if [[ -f "$mm_path" ]]; then
        mm_stat="$(cat "$mm_path")"
        function column() {
            echo "$mm_stat" | awk -v "n=$1" '{print $n}'
        }
        echo -e "$mm_path = [pages_compacted: $(column 7) huge_pages_since: $(column 9)]"
    else
        echo -e "$mm_path not available!"
    fi
}

function turns_a_knob() {
    knob="${1:?Need a knob to write to.}"
    valu="${2:?Need a valu to write to $knob.}"
    if [[ -f "$knob" ]]; then
        $DEBG echo -e "Î» ${NOOP}echo ${valu} >$knob"
        $NOOP echo "${valu}" >"$knob"
    else
        $DEBG echo -e "$knob is not available!"
    fi
}

# recompress then compact
for device in /dev/zram*; do
    ONCE=$DEBG
    sysblk=/sys/block/"${device##*/}"
    $DEBG print_states "$device" # pre
    $DENT turns_a_knob "$sysblk"/recompress "$TYPE"
    $DEBG print_states "$device" # inter
    $DENT turns_a_knob "$sysblk"/compact ' '
    $DEBG print_states "$device" # post
done
