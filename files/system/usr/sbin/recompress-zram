#!/usr/bin/env bash
## devhints.io/bash
set -euo pipefail
IFS=$'\n\t'

# ensure sysfs knobs can be meddled with
if [[ $(/usr/bin/id -u) -ne 0 ]]; then
    echo "Not running as root"
    exit
fi

traperr() {
    echo "ERROR: ${BASH_SOURCE[1]} at about ${BASH_LINENO[0]}"
}

set -o errtrace
trap traperr ERR

# settings
TIMEFORMAT=$'real: %3lR\tuser: %3lU\tsys: %3lS'
TYPE="${TYPE:=type=huge}"

# comment out
DEBG=${DEBUG-:}
DENT=
NOOP=
while [[ $# -gt 0 ]]; do
    case "${1:-}" in
    --debug | --verbose | -d)
        DEBG=
        ;;
    --noop | --dry-run | -n)
        NOOP=:
        ;;
    esac
    shift
done

function print_states() {
    $DEBG zramctl --output-all "${1:?Need a '/dev/zram<n>' device path.}"
    $ONCE cat "$sysblk"/recomp_algorithm
    statevar="/sys/kernel/debug/zram/${1##*/}/block_state"
    if [[ -f "$statevar" ]]; then
        block_state="$(cat "$statevar")"
        function state() {
            echo "$block_state" | grep -cs "$1" || true
        }
        echo -en "block_state=[huge: $(state 'h')\tidle: $(state 'i')\trcmp: $(state 'r')\tnone: $(state 'n')\ttotal: $(state '')]"
    else
        echo -en "$statevar not available!\t"
    fi
    ONCE=:
}

function turns_a_knob() {
    knob="${1:?Need a knob to write to.}"
    parm="${2:?Need a parm to write to $knob.}"
    if [[ -f "$knob" ]]; then
        $DEBG echo -e " Î» ${NOOP}echo ${parm}\t>$knob"
        $NOOP echo "${parm}" >"$knob"
    else
        $DEBG echo -e "$knob is not available!"
    fi
}

# recompress then compact
for device in /dev/zram*; do
    ONCE=$DEBG
    sysblk=/sys/block/"${device##*/}"
    $DEBG print_states "$device"
    $DENT turns_a_knob "$sysblk"/recompress "$TYPE"
    $DEBG print_states "$device"
    $DENT turns_a_knob "$sysblk"/compact ' '
done
