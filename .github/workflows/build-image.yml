name: build-image
on:
  workflow_dispatch: # allow manually triggering builds
  push:
    paths-ignore:
      - "**/release-please.yml"
      - "**/recompress-latest.yml"
      - "**/vulnerability-scan.yml"
      - "**/composition-analysis.yml"
      - "**.md"
      - "**/.gitkeep"
      - "build-isos"
      - "renovate.json"
  schedule:
    - cron:
        "25 06 * * 1,3,5" # build at 06:10 UTC on Mon, Wed, Fr
        # (45 minutes after last ublue images start building)

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

env:
  IS_DEFAULT: false
  REGISTRY_USERNAME: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ github.token }}
  REGISTRY_IMG_PATH: ghcr.io/${{ github.repository_owner }}

jobs:
  imagebuild:
    name: Build Custom Image
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: true
      matrix:
        package:
          #- aubertit
          #- buttgenbachit
          - carbonatcyanotrichit
          - flaviramea
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          overprovision-lvm: true
          remove-android: true
          remove-codeql: true
          remove-docker-images: true
          remove-dotnet: true
          remove-haskell: true
      - name: Convert to compressed filesystem
        shell: bash
        run: |
          set -euxo pipefail

          # https://github.com/easimon/maximize-build-space/issues/23
          # https://github.com/easimon/maximize-build-space/pull/37
          WORKSPACE_OWNER="$(stat -c '%U:%G' "${GITHUB_WORKSPACE}")"
          VG_NAME=buildvg
          LV_NAME="/dev/mapper/${VG_NAME}-buildlv"

          cd ~
          sudo umount "${LV_NAME}"

          # https://github.com/radxa/armbian-compile-action/commit/82fe40188f2f3b4dbd4ae8fb9c64f49f117085c7
          sudo mkfs.btrfs -L buildlv -M -m single --force "${LV_NAME}"
          sudo mount -o defaults,noatime,compress=zstd:1,discard=sync "${LV_NAME}" "${GITHUB_WORKSPACE}"

          sudo chown -R "$WORKSPACE_OWNER" "${GITHUB_WORKSPACE}"

          sudo mkdir -p /sysroot/ostree/ "${GITHUB_WORKSPACE}"/repo
          sudo ln -ds "${GITHUB_WORKSPACE}"/repo /sysroot/ostree/repo

      - name: Checkout codeZ
        uses: actions/checkout@v4

      - name: Check if on default (main) or test (rechunk) branch to rechunk it
        run: |
          if [[ '${{ github.ref_name }}' == '${{ github.event.repository.default_branch }}' || '${{ github.ref_name }}' == 'rechunk' ]]; then
            echo 'IS_DEFAULT=true'>$GITHUB_ENV
          fi

      - id: build
        name: Build Custom Image
        uses: blue-build/github-action@v1.8.1
        with:
          cosign_private_key: ${{ secrets.SIGNING_SECRET }}
          maximize_build_space: ${{ env.IS_DEFAULT }}
          pr_event_number: ${{ github.event.number }}
          rechunk: ${{ env.IS_DEFAULT }}
          recipe: recipe-${{ matrix.package }}.yml
          registry_token: ${{ github.token }}
          # build_args: |
          #   --compression-format zstd:chunked

      # This is something the community worked on for quite some time
      #   but it likely will improve the efficiency of transfers;
      #    this was made to workaround the fact that blue-build
      #     does not yet support zstd:chunked and it depends
      #      on bootc/rpm-ostree having implemented this,
      #       which according to my tests is now good.
      #
      # Changetracker
      #   https://fedoraproject.org/wiki/Changes/zstd:chunked
      #   https://github.com/containers/storage/pull/775
      # Documentation
      #   https://bootc-dev.github.io/bootc/filesystem-storage.html
      #   https://eu-os.eu/goals#goals # interesting new project
      # Projectstuffz
      #   https://github.com/blue-build/cli/issues/112
      #   https://github.com/containers/bootc/issues/20
      #   https://github.com/containers/bootc/issues/963
      - id: recmp
        name: Recompress to zstd:chunked
        run: |
          set -euo pipefail

          echo "${{ secrets.SIGNING_SECRET }}" >cosign.key
          IMAGE_REF=${REGISTRY_IMG_PATH@L}/${{ matrix.package }}:latest

          podman login ghcr.io \
            --username ${{ env.REGISTRY_USERNAME }} \
            --password ${{ env.REGISTRY_PASSWORD }}

          podman pull "${IMAGE_REF}"
          podman tag  "${IMAGE_REF}" "${IMAGE_REF}-zstchd" # zstd:chunked
          podman images --digests
          podman push \
            --compression-format=zstd:chunked \
            --sign-by-sigstore-private-key=cosign.key \
            "$(podman image list --digests --format json | jq -r '.[0].Id')" "${IMAGE_REF}"-zstchd

      - name: Print outputs
        run: |
          echo '${{ toJSON(steps.build.outputs) }}' | jq .
          echo '${{ toJSON(steps.recmp.outputs) }}' | jq .
